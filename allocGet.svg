<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="501"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="501"> </text>
<g id="frames">
<g>
<title>all (367 samples, 100.00%)</title><rect x="10.0" y="467.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="478.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (367 samples, 100.00%)</title><rect x="10.0" y="451.0" width="1180.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="462.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/Session.process (367 samples, 100.00%)</title><rect x="10.0" y="435.0" width="1180.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="446.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (367 samples, 100.00%)</title><rect x="10.0" y="419.0" width="1180.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="430.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (367 samples, 100.00%)</title><rect x="10.0" y="403.0" width="1180.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="414.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (290 samples, 79.02%)</title><rect x="10.0" y="387.0" width="932.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="398.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (290 samples, 79.02%)</title><rect x="10.0" y="371.0" width="932.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="382.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (290 samples, 79.02%)</title><rect x="10.0" y="355.0" width="932.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="366.0">RequestHandler0_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (15 samples, 4.09%)</title><rect x="10.0" y="339.0" width="48.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="350.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (15 samples, 4.09%)</title><rect x="10.0" y="323.0" width="48.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="334.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (15 samples, 4.09%)</title><rect x="10.0" y="307.0" width="48.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="318.0">one/..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (15 samples, 4.09%)</title><rect x="10.0" y="291.0" width="48.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="13.0" y="302.0">one...</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.27%)</title><rect x="58.2" y="339.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="61.2" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.27%)</title><rect x="58.2" y="323.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="61.2" y="334.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.27%)</title><rect x="58.2" y="307.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.2" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.27%)</title><rect x="58.2" y="291.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="61.2" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.27%)</title><rect x="58.2" y="275.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="61.2" y="286.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.27%)</title><rect x="58.2" y="259.0" width="3.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="61.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/bmendli/MyService.get (274 samples, 74.66%)</title><rect x="61.4" y="339.0" width="881.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.4" y="350.0">ru/mail/polis/service/bmendli/MyService.get</text>
</g>
<g>
<title>java/io/PrintStream.println (15 samples, 4.09%)</title><rect x="61.4" y="323.0" width="48.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.4" y="334.0">java..</text>
</g>
<g>
<title>java/io/PrintStream.newLine (15 samples, 4.09%)</title><rect x="61.4" y="307.0" width="48.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="64.4" y="318.0">java..</text>
</g>
<g>
<title>java/io/BufferedWriter.flushBuffer (15 samples, 4.09%)</title><rect x="61.4" y="291.0" width="48.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="64.4" y="302.0">java..</text>
</g>
<g>
<title>java/io/OutputStreamWriter.write (15 samples, 4.09%)</title><rect x="61.4" y="275.0" width="48.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="64.4" y="286.0">java..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.write (15 samples, 4.09%)</title><rect x="61.4" y="259.0" width="48.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="64.4" y="270.0">sun/..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implWrite (15 samples, 4.09%)</title><rect x="61.4" y="243.0" width="48.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="64.4" y="254.0">sun/..</text>
</g>
<g>
<title>java/nio/CharBuffer.wrap (15 samples, 4.09%)</title><rect x="61.4" y="227.0" width="48.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.4" y="238.0">java..</text>
</g>
<g>
<title>java.nio.HeapCharBuffer (15 samples, 4.09%)</title><rect x="61.4" y="211.0" width="48.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="64.4" y="222.0">java..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (30 samples, 8.17%)</title><rect x="109.7" y="323.0" width="96.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="112.7" y="334.0">java/lang/i..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/874088044.invoke (30 samples, 8.17%)</title><rect x="109.7" y="307.0" width="96.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="112.7" y="318.0">java/lang/i..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (30 samples, 8.17%)</title><rect x="109.7" y="291.0" width="96.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="112.7" y="302.0">java/lang/i..</text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (15 samples, 4.09%)</title><rect x="109.7" y="275.0" width="48.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="112.7" y="286.0">java..</text>
</g>
<g>
<title>java.lang.String (15 samples, 4.09%)</title><rect x="109.7" y="259.0" width="48.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="112.7" y="270.0">java..</text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (15 samples, 4.09%)</title><rect x="157.9" y="275.0" width="48.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="160.9" y="286.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (15 samples, 4.09%)</title><rect x="157.9" y="259.0" width="48.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="160.9" y="270.0">jdk/..</text>
</g>
<g>
<title>byte[] (15 samples, 4.09%)</title><rect x="157.9" y="243.0" width="48.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="160.9" y="254.0">byte[]</text>
</g>
<g>
<title>one/nio/http/Response.ok (31 samples, 8.45%)</title><rect x="206.1" y="323.0" width="99.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.1" y="334.0">one/nio/http..</text>
</g>
<g>
<title>one.nio.http.Response (16 samples, 4.36%)</title><rect x="206.1" y="307.0" width="51.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="209.1" y="318.0">one.n..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (15 samples, 4.09%)</title><rect x="257.6" y="307.0" width="48.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="260.6" y="318.0">one/..</text>
</g>
<g>
<title>java.lang.String[] (15 samples, 4.09%)</title><rect x="257.6" y="291.0" width="48.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="260.6" y="302.0">java..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (198 samples, 53.95%)</title><rect x="305.8" y="323.0" width="636.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.8" y="334.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (30 samples, 8.17%)</title><rect x="305.8" y="307.0" width="96.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.8" y="318.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (30 samples, 8.17%)</title><rect x="305.8" y="291.0" width="96.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.8" y="302.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (30 samples, 8.17%)</title><rect x="305.8" y="275.0" width="96.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="308.8" y="286.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (30 samples, 8.17%)</title><rect x="305.8" y="259.0" width="96.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="308.8" y="270.0">com/google/..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (30 samples, 8.17%)</title><rect x="305.8" y="243.0" width="96.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="308.8" y="254.0">ru/mail/pol..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (15 samples, 4.09%)</title><rect x="305.8" y="227.0" width="48.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.8" y="238.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (15 samples, 4.09%)</title><rect x="305.8" y="211.0" width="48.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="308.8" y="222.0">com/..</text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (15 samples, 4.09%)</title><rect x="305.8" y="195.0" width="48.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="308.8" y="206.0">java..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (15 samples, 4.09%)</title><rect x="305.8" y="179.0" width="48.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="308.8" y="190.0">java..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (15 samples, 4.09%)</title><rect x="305.8" y="163.0" width="48.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="308.8" y="174.0">java..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (15 samples, 4.09%)</title><rect x="305.8" y="147.0" width="48.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.8" y="158.0">java..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$66/956138484.getAsBoolean (15 samples, 4.09%)</title><rect x="305.8" y="131.0" width="48.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="308.8" y="142.0">java..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (15 samples, 4.09%)</title><rect x="305.8" y="115.0" width="48.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="308.8" y="126.0">java..</text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (15 samples, 4.09%)</title><rect x="305.8" y="99.0" width="48.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="308.8" y="110.0">java..</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (15 samples, 4.09%)</title><rect x="305.8" y="83.0" width="48.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.8" y="94.0">java..</text>
</g>
<g>
<title>ru/mail/polis/dao/bmendli/MemTable$$Lambda$58/1678497792.apply (15 samples, 4.09%)</title><rect x="305.8" y="67.0" width="48.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="308.8" y="78.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/bmendli/MemTable.lambda$iterator$0 (15 samples, 4.09%)</title><rect x="305.8" y="51.0" width="48.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.8" y="62.0">ru/m..</text>
</g>
<g>
<title>ru.mail.polis.dao.bmendli.Cell (15 samples, 4.09%)</title><rect x="305.8" y="35.0" width="48.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="308.8" y="46.0">ru.m..</text>
</g>
<g>
<title>ru/mail/polis/dao/bmendli/DAOImpl$$Lambda$67/1003271602.apply (15 samples, 4.09%)</title><rect x="354.0" y="227.0" width="48.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="357.0" y="238.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/bmendli/Cell.getKey (15 samples, 4.09%)</title><rect x="354.0" y="211.0" width="48.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="357.0" y="222.0">ru/m..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (15 samples, 4.09%)</title><rect x="354.0" y="195.0" width="48.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="357.0" y="206.0">java..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (15 samples, 4.09%)</title><rect x="354.0" y="179.0" width="48.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="357.0" y="190.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (15 samples, 4.09%)</title><rect x="354.0" y="163.0" width="48.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="357.0" y="174.0">java..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.27%)</title><rect x="402.3" y="307.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="405.3" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (1 samples, 0.27%)</title><rect x="402.3" y="291.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="405.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/bmendli/DAOImpl$$Lambda$69/1192947024.apply (1 samples, 0.27%)</title><rect x="402.3" y="275.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="405.3" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/bmendli/DAOImpl.lambda$iterator$2 (1 samples, 0.27%)</title><rect x="402.3" y="259.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="405.3" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/bmendli/Cell.getKey (1 samples, 0.27%)</title><rect x="402.3" y="243.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="405.3" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (1 samples, 0.27%)</title><rect x="402.3" y="227.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="405.3" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.27%)</title><rect x="402.3" y="211.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="405.3" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1 samples, 0.27%)</title><rect x="402.3" y="195.0" width="3.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="405.3" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (15 samples, 4.09%)</title><rect x="405.5" y="307.0" width="48.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="408.5" y="318.0">ru/m..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (15 samples, 4.09%)</title><rect x="405.5" y="291.0" width="48.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="408.5" y="302.0">java..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (15 samples, 4.09%)</title><rect x="405.5" y="275.0" width="48.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="408.5" y="286.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (15 samples, 4.09%)</title><rect x="405.5" y="259.0" width="48.2" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="408.5" y="270.0">java..</text>
</g>
<g>
<title>ru/mail/polis/dao/bmendli/DAOImpl.iterator (152 samples, 41.42%)</title><rect x="453.7" y="307.0" width="488.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="456.7" y="318.0">ru/mail/polis/dao/bmendli/DAOImpl.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/bmendli/DAOImpl.cellIterator (152 samples, 41.42%)</title><rect x="453.7" y="291.0" width="488.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="456.7" y="302.0">ru/mail/polis/dao/bmendli/DAOImpl.cellIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (45 samples, 12.26%)</title><rect x="453.7" y="275.0" width="144.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="456.7" y="286.0">com/google/common/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (45 samples, 12.26%)</title><rect x="453.7" y="259.0" width="144.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="456.7" y="270.0">com/google/common/..</text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (45 samples, 12.26%)</title><rect x="453.7" y="243.0" width="144.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="456.7" y="254.0">java/util/Splitera..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (45 samples, 12.26%)</title><rect x="453.7" y="227.0" width="144.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="456.7" y="238.0">java/util/stream/S..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (45 samples, 12.26%)</title><rect x="453.7" y="211.0" width="144.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="456.7" y="222.0">java/util/stream/S..</text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (15 samples, 4.09%)</title><rect x="453.7" y="195.0" width="48.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="456.7" y="206.0">java..</text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (15 samples, 4.09%)</title><rect x="453.7" y="179.0" width="48.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="456.7" y="190.0">java..</text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (15 samples, 4.09%)</title><rect x="453.7" y="163.0" width="48.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="456.7" y="174.0">java..</text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$SubMapEntryIterator (15 samples, 4.09%)</title><rect x="453.7" y="147.0" width="48.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="456.7" y="158.0">java..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (30 samples, 8.17%)</title><rect x="501.9" y="195.0" width="96.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="504.9" y="206.0">java/util/s..</text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (30 samples, 8.17%)</title><rect x="501.9" y="179.0" width="96.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="504.9" y="190.0">java/util/s..</text>
</g>
<g>
<title>java.lang.Object[] (30 samples, 8.17%)</title><rect x="501.9" y="163.0" width="96.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="504.9" y="174.0">java.lang.O..</text>
</g>
<g>
<title>java/util/Comparator.comparing (16 samples, 4.36%)</title><rect x="598.4" y="275.0" width="51.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="601.4" y="286.0">java/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (16 samples, 4.36%)</title><rect x="598.4" y="259.0" width="51.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="601.4" y="270.0">java/..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (16 samples, 4.36%)</title><rect x="598.4" y="243.0" width="51.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="601.4" y="254.0">java/..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$62/1803300782.get$Lambda (16 samples, 4.36%)</title><rect x="598.4" y="227.0" width="51.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="601.4" y="238.0">java/..</text>
</g>
<g>
<title>java.util.Comparator$$Lambda$62 (16 samples, 4.36%)</title><rect x="598.4" y="211.0" width="51.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="601.4" y="222.0">java...</text>
</g>
<g>
<title>java/util/Comparator.thenComparing (15 samples, 4.09%)</title><rect x="649.8" y="275.0" width="48.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="652.8" y="286.0">java..</text>
</g>
<g>
<title>java/util/Comparator.comparing (15 samples, 4.09%)</title><rect x="649.8" y="259.0" width="48.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="652.8" y="270.0">java..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (15 samples, 4.09%)</title><rect x="649.8" y="243.0" width="48.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="652.8" y="254.0">java..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (15 samples, 4.09%)</title><rect x="649.8" y="227.0" width="48.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="652.8" y="238.0">java..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$62/1803300782.get$Lambda (15 samples, 4.09%)</title><rect x="649.8" y="211.0" width="48.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="652.8" y="222.0">java..</text>
</g>
<g>
<title>java.util.Comparator$$Lambda$62 (15 samples, 4.09%)</title><rect x="649.8" y="195.0" width="48.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="652.8" y="206.0">java..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (15 samples, 4.09%)</title><rect x="698.1" y="275.0" width="48.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="701.1" y="286.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (15 samples, 4.09%)</title><rect x="698.1" y="259.0" width="48.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="701.1" y="270.0">ru/m..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (15 samples, 4.09%)</title><rect x="698.1" y="243.0" width="48.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="701.1" y="254.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (15 samples, 4.09%)</title><rect x="698.1" y="227.0" width="48.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="701.1" y="238.0">com/..</text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (15 samples, 4.09%)</title><rect x="698.1" y="211.0" width="48.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="701.1" y="222.0">java..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (15 samples, 4.09%)</title><rect x="698.1" y="195.0" width="48.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="701.1" y="206.0">java..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (15 samples, 4.09%)</title><rect x="698.1" y="179.0" width="48.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="701.1" y="190.0">java..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (15 samples, 4.09%)</title><rect x="698.1" y="163.0" width="48.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="701.1" y="174.0">java..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$66/956138484.getAsBoolean (15 samples, 4.09%)</title><rect x="698.1" y="147.0" width="48.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="701.1" y="158.0">java..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (15 samples, 4.09%)</title><rect x="698.1" y="131.0" width="48.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="701.1" y="142.0">java..</text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (15 samples, 4.09%)</title><rect x="698.1" y="115.0" width="48.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="701.1" y="126.0">java..</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (15 samples, 4.09%)</title><rect x="698.1" y="99.0" width="48.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="701.1" y="110.0">java..</text>
</g>
<g>
<title>ru/mail/polis/dao/bmendli/MemTable$$Lambda$58/1678497792.apply (15 samples, 4.09%)</title><rect x="698.1" y="83.0" width="48.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="701.1" y="94.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/bmendli/MemTable.lambda$iterator$0 (15 samples, 4.09%)</title><rect x="698.1" y="67.0" width="48.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="701.1" y="78.0">ru/m..</text>
</g>
<g>
<title>ru.mail.polis.dao.bmendli.Cell (15 samples, 4.09%)</title><rect x="698.1" y="51.0" width="48.2" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="701.1" y="62.0">ru.m..</text>
</g>
<g>
<title>ru/mail/polis/dao/bmendli/MemTable.iterator (61 samples, 16.62%)</title><rect x="746.3" y="275.0" width="196.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="749.3" y="286.0">ru/mail/polis/dao/bmendli/..</text>
</g>
<g>
<title>java/util/Collection.stream (16 samples, 4.36%)</title><rect x="746.3" y="259.0" width="51.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="749.3" y="270.0">java/..</text>
</g>
<g>
<title>java/util/Set.spliterator (16 samples, 4.36%)</title><rect x="746.3" y="243.0" width="51.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="749.3" y="254.0">java/..</text>
</g>
<g>
<title>java/util/Spliterators.spliterator (16 samples, 4.36%)</title><rect x="746.3" y="227.0" width="51.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="749.3" y="238.0">java/..</text>
</g>
<g>
<title>java.util.Spliterators$IteratorSpliterator (16 samples, 4.36%)</title><rect x="746.3" y="211.0" width="51.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="749.3" y="222.0">java...</text>
</g>
<g>
<title>java/util/TreeMap.tailMap (15 samples, 4.09%)</title><rect x="797.7" y="259.0" width="48.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="800.7" y="270.0">java..</text>
</g>
<g>
<title>java/util/TreeMap.tailMap (15 samples, 4.09%)</title><rect x="797.7" y="243.0" width="48.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="800.7" y="254.0">java..</text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap (15 samples, 4.09%)</title><rect x="797.7" y="227.0" width="48.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="800.7" y="238.0">java..</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (15 samples, 4.09%)</title><rect x="846.0" y="259.0" width="48.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="849.0" y="270.0">java..</text>
</g>
<g>
<title>java/util/Spliterators.iterator (15 samples, 4.09%)</title><rect x="846.0" y="243.0" width="48.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="849.0" y="254.0">java..</text>
</g>
<g>
<title>java.util.Spliterators$1Adapter (15 samples, 4.09%)</title><rect x="846.0" y="227.0" width="48.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="849.0" y="238.0">java..</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (15 samples, 4.09%)</title><rect x="894.2" y="259.0" width="48.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="897.2" y="270.0">java..</text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (15 samples, 4.09%)</title><rect x="894.2" y="243.0" width="48.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="897.2" y="254.0">java..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (31 samples, 8.45%)</title><rect x="942.4" y="387.0" width="99.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="945.4" y="398.0">one/nio/http..</text>
</g>
<g>
<title>one.nio.http.Request (16 samples, 4.36%)</title><rect x="942.4" y="371.0" width="51.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="945.4" y="382.0">one.n..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 4.09%)</title><rect x="993.9" y="371.0" width="48.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="996.9" y="382.0">one/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 4.09%)</title><rect x="993.9" y="355.0" width="48.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="996.9" y="366.0">one/..</text>
</g>
<g>
<title>char[] (15 samples, 4.09%)</title><rect x="993.9" y="339.0" width="48.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="996.9" y="350.0">char[]</text>
</g>
<g>
<title>one/nio/util/Utf8.read (46 samples, 12.53%)</title><rect x="1042.1" y="387.0" width="147.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1045.1" y="398.0">one/nio/util/Utf8.r..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (46 samples, 12.53%)</title><rect x="1042.1" y="371.0" width="147.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1045.1" y="382.0">one/nio/util/Utf8.r..</text>
</g>
<g>
<title>char[] (30 samples, 8.17%)</title><rect x="1042.1" y="355.0" width="96.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1045.1" y="366.0">char[]</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (16 samples, 4.36%)</title><rect x="1138.6" y="355.0" width="51.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1141.6" y="366.0">java/..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (16 samples, 4.36%)</title><rect x="1138.6" y="339.0" width="51.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1141.6" y="350.0">java/..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (16 samples, 4.36%)</title><rect x="1138.6" y="323.0" width="51.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1141.6" y="334.0">java/..</text>
</g>
<g>
<title>byte[] (16 samples, 4.36%)</title><rect x="1138.6" y="307.0" width="51.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1141.6" y="318.0">byte[]</text>
</g>
</g>
</svg>
