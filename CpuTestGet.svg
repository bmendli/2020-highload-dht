<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (850 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (845 samples, 99.41%)</title><rect x="10.0" y="883.0" width="1173.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/Session.process (845 samples, 99.41%)</title><rect x="10.0" y="867.0" width="1173.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (845 samples, 99.41%)</title><rect x="10.0" y="851.0" width="1173.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="862.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (843 samples, 99.18%)</title><rect x="10.0" y="835.0" width="1170.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="846.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (841 samples, 98.94%)</title><rect x="11.4" y="819.0" width="1167.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.4" y="830.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (841 samples, 98.94%)</title><rect x="11.4" y="803.0" width="1167.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="14.4" y="814.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (841 samples, 98.94%)</title><rect x="11.4" y="787.0" width="1167.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.4" y="798.0">RequestHandler0_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (15 samples, 1.76%)</title><rect x="11.4" y="771.0" width="20.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="14.4" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (14 samples, 1.65%)</title><rect x="11.4" y="755.0" width="19.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.4" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 1.65%)</title><rect x="11.4" y="739.0" width="19.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="14.4" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 1.65%)</title><rect x="11.4" y="723.0" width="19.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="14.4" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (13 samples, 1.53%)</title><rect x="11.4" y="707.0" width="18.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.4" y="718.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (13 samples, 1.53%)</title><rect x="11.4" y="691.0" width="18.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="14.4" y="702.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.12%)</title><rect x="11.4" y="675.0" width="1.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="14.4" y="686.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.12%)</title><rect x="11.4" y="659.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.4" y="670.0"></text>
</g>
<g>
<title>__libc_send (12 samples, 1.41%)</title><rect x="12.8" y="675.0" width="16.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="15.8" y="686.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (12 samples, 1.41%)</title><rect x="12.8" y="659.0" width="16.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="15.8" y="670.0"></text>
</g>
<g>
<title>do_syscall_64 (12 samples, 1.41%)</title><rect x="12.8" y="643.0" width="16.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="15.8" y="654.0"></text>
</g>
<g>
<title>__x64_sys_sendto (11 samples, 1.29%)</title><rect x="14.2" y="627.0" width="15.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="17.2" y="638.0"></text>
</g>
<g>
<title>__sys_sendto (11 samples, 1.29%)</title><rect x="14.2" y="611.0" width="15.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="17.2" y="622.0"></text>
</g>
<g>
<title>sock_sendmsg (11 samples, 1.29%)</title><rect x="14.2" y="595.0" width="15.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="17.2" y="606.0"></text>
</g>
<g>
<title>inet6_sendmsg (10 samples, 1.18%)</title><rect x="14.2" y="579.0" width="13.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="17.2" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg (10 samples, 1.18%)</title><rect x="14.2" y="563.0" width="13.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="17.2" y="574.0"></text>
</g>
<g>
<title>tcp_push (1 samples, 0.12%)</title><rect x="14.2" y="547.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="17.2" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (9 samples, 1.06%)</title><rect x="15.6" y="547.0" width="12.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="18.6" y="558.0"></text>
</g>
<g>
<title>tcp_push (9 samples, 1.06%)</title><rect x="15.6" y="531.0" width="12.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="18.6" y="542.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (9 samples, 1.06%)</title><rect x="15.6" y="515.0" width="12.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="18.6" y="526.0"></text>
</g>
<g>
<title>tcp_write_xmit (9 samples, 1.06%)</title><rect x="15.6" y="499.0" width="12.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="18.6" y="510.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (9 samples, 1.06%)</title><rect x="15.6" y="483.0" width="12.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="18.6" y="494.0"></text>
</g>
<g>
<title>ip_queue_xmit (9 samples, 1.06%)</title><rect x="15.6" y="467.0" width="12.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="18.6" y="478.0"></text>
</g>
<g>
<title>__ip_queue_xmit (9 samples, 1.06%)</title><rect x="15.6" y="451.0" width="12.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="18.6" y="462.0"></text>
</g>
<g>
<title>ip_local_out (9 samples, 1.06%)</title><rect x="15.6" y="435.0" width="12.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="18.6" y="446.0"></text>
</g>
<g>
<title>__ip_local_out (1 samples, 0.12%)</title><rect x="15.6" y="419.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="18.6" y="430.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.12%)</title><rect x="15.6" y="403.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="18.6" y="414.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (1 samples, 0.12%)</title><rect x="15.6" y="387.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="18.6" y="398.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (1 samples, 0.12%)</title><rect x="15.6" y="371.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="18.6" y="382.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get?[nf_conntrack] (1 samples, 0.12%)</title><rect x="15.6" y="355.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="18.6" y="366.0"></text>
</g>
<g>
<title>ip_output (8 samples, 0.94%)</title><rect x="16.9" y="419.0" width="11.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="19.9" y="430.0"></text>
</g>
<g>
<title>ip_finish_output (8 samples, 0.94%)</title><rect x="16.9" y="403.0" width="11.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="19.9" y="414.0"></text>
</g>
<g>
<title>__ip_finish_output (8 samples, 0.94%)</title><rect x="16.9" y="387.0" width="11.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="19.9" y="398.0"></text>
</g>
<g>
<title>ip_finish_output2 (8 samples, 0.94%)</title><rect x="16.9" y="371.0" width="11.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="19.9" y="382.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (8 samples, 0.94%)</title><rect x="16.9" y="355.0" width="11.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="19.9" y="366.0"></text>
</g>
<g>
<title>do_softirq.part.20 (8 samples, 0.94%)</title><rect x="16.9" y="339.0" width="11.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="19.9" y="350.0"></text>
</g>
<g>
<title>do_softirq_own_stack (8 samples, 0.94%)</title><rect x="16.9" y="323.0" width="11.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="19.9" y="334.0"></text>
</g>
<g>
<title>__softirqentry_text_start (8 samples, 0.94%)</title><rect x="16.9" y="307.0" width="11.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="19.9" y="318.0"></text>
</g>
<g>
<title>net_rx_action (7 samples, 0.82%)</title><rect x="18.3" y="291.0" width="9.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="21.3" y="302.0"></text>
</g>
<g>
<title>process_backlog (7 samples, 0.82%)</title><rect x="18.3" y="275.0" width="9.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="21.3" y="286.0"></text>
</g>
<g>
<title>__netif_receive_skb (7 samples, 0.82%)</title><rect x="18.3" y="259.0" width="9.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="21.3" y="270.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (7 samples, 0.82%)</title><rect x="18.3" y="243.0" width="9.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="21.3" y="254.0"></text>
</g>
<g>
<title>ip_rcv (7 samples, 0.82%)</title><rect x="18.3" y="227.0" width="9.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="21.3" y="238.0"></text>
</g>
<g>
<title>ip_rcv_finish (7 samples, 0.82%)</title><rect x="18.3" y="211.0" width="9.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="21.3" y="222.0"></text>
</g>
<g>
<title>ip_local_deliver (7 samples, 0.82%)</title><rect x="18.3" y="195.0" width="9.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="21.3" y="206.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (7 samples, 0.82%)</title><rect x="18.3" y="179.0" width="9.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="21.3" y="190.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (7 samples, 0.82%)</title><rect x="18.3" y="163.0" width="9.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="21.3" y="174.0"></text>
</g>
<g>
<title>tcp_v4_rcv (7 samples, 0.82%)</title><rect x="18.3" y="147.0" width="9.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="21.3" y="158.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (7 samples, 0.82%)</title><rect x="18.3" y="131.0" width="9.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="21.3" y="142.0"></text>
</g>
<g>
<title>tcp_rcv_established (6 samples, 0.71%)</title><rect x="19.7" y="115.0" width="8.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="22.7" y="126.0"></text>
</g>
<g>
<title>tcp_data_ready (6 samples, 0.71%)</title><rect x="19.7" y="99.0" width="8.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="22.7" y="110.0"></text>
</g>
<g>
<title>sock_def_readable (6 samples, 0.71%)</title><rect x="19.7" y="83.0" width="8.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="22.7" y="94.0"></text>
</g>
<g>
<title>__wake_up_sync_key (6 samples, 0.71%)</title><rect x="19.7" y="67.0" width="8.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="22.7" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (6 samples, 0.71%)</title><rect x="19.7" y="51.0" width="8.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="22.7" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (6 samples, 0.71%)</title><rect x="19.7" y="35.0" width="8.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="22.7" y="46.0"></text>
</g>
<g>
<title>security_socket_sendmsg (1 samples, 0.12%)</title><rect x="28.0" y="579.0" width="1.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="31.0" y="590.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.12%)</title><rect x="28.0" y="563.0" width="1.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="31.0" y="574.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.12%)</title><rect x="28.0" y="547.0" width="1.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="31.0" y="558.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.12%)</title><rect x="28.0" y="531.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="31.0" y="542.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (1 samples, 0.12%)</title><rect x="28.0" y="515.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="31.0" y="526.0"></text>
</g>
<g>
<title>aa_profile_af_perm (1 samples, 0.12%)</title><rect x="28.0" y="499.0" width="1.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="31.0" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.12%)</title><rect x="29.4" y="707.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="32.4" y="718.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.12%)</title><rect x="29.4" y="691.0" width="1.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="32.4" y="702.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="29.4" y="675.0" width="1.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="32.4" y="686.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (1 samples, 0.12%)</title><rect x="30.8" y="755.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.8" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/bmendli/MyService.get (826 samples, 97.18%)</title><rect x="32.2" y="771.0" width="1146.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="35.2" y="782.0">ru/mail/polis/service/bmendli/MyService.get</text>
</g>
<g>
<title>java/io/PrintStream.println (13 samples, 1.53%)</title><rect x="32.2" y="755.0" width="18.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="35.2" y="766.0"></text>
</g>
<g>
<title>java/io/PrintStream.print (13 samples, 1.53%)</title><rect x="32.2" y="739.0" width="18.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.2" y="750.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (13 samples, 1.53%)</title><rect x="32.2" y="723.0" width="18.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="35.2" y="734.0"></text>
</g>
<g>
<title>java/io/BufferedWriter.flushBuffer (2 samples, 0.24%)</title><rect x="33.6" y="707.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="36.6" y="718.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.write (2 samples, 0.24%)</title><rect x="33.6" y="691.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="36.6" y="702.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.write (2 samples, 0.24%)</title><rect x="33.6" y="675.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="36.6" y="686.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implWrite (2 samples, 0.24%)</title><rect x="33.6" y="659.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="36.6" y="670.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.wrap (1 samples, 0.12%)</title><rect x="33.6" y="643.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="36.6" y="654.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeArrayLoop (1 samples, 0.12%)</title><rect x="33.6" y="627.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="36.6" y="638.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implWrite (1 samples, 0.12%)</title><rect x="35.0" y="643.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.0" y="654.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.encode (1 samples, 0.12%)</title><rect x="35.0" y="627.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="38.0" y="638.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeLoop (1 samples, 0.12%)</title><rect x="35.0" y="611.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.0" y="622.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.flushBuffer (10 samples, 1.18%)</title><rect x="36.4" y="707.0" width="13.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.4" y="718.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flushBuffer (10 samples, 1.18%)</title><rect x="36.4" y="691.0" width="13.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="39.4" y="702.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (10 samples, 1.18%)</title><rect x="36.4" y="675.0" width="13.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="39.4" y="686.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (10 samples, 1.18%)</title><rect x="36.4" y="659.0" width="13.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="39.4" y="670.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (10 samples, 1.18%)</title><rect x="36.4" y="643.0" width="13.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.4" y="654.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (9 samples, 1.06%)</title><rect x="36.4" y="627.0" width="12.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="39.4" y="638.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (8 samples, 0.94%)</title><rect x="37.8" y="611.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.8" y="622.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (8 samples, 0.94%)</title><rect x="37.8" y="595.0" width="11.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="40.8" y="606.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (8 samples, 0.94%)</title><rect x="37.8" y="579.0" width="11.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="40.8" y="590.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (1 samples, 0.12%)</title><rect x="37.8" y="563.0" width="1.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="40.8" y="574.0"></text>
</g>
<g>
<title>writeBytes (1 samples, 0.12%)</title><rect x="37.8" y="547.0" width="1.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="40.8" y="558.0"></text>
</g>
<g>
<title>jni_GetObjectField (1 samples, 0.12%)</title><rect x="37.8" y="531.0" width="1.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="40.8" y="542.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;802934ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 802934ul&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.12%)</title><rect x="37.8" y="515.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="40.8" y="526.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.82%)</title><rect x="39.2" y="563.0" width="9.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="42.2" y="574.0"></text>
</g>
<g>
<title>__GI_write (7 samples, 0.82%)</title><rect x="39.2" y="547.0" width="9.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="42.2" y="558.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 0.82%)</title><rect x="39.2" y="531.0" width="9.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="42.2" y="542.0"></text>
</g>
<g>
<title>do_syscall_64 (7 samples, 0.82%)</title><rect x="39.2" y="515.0" width="9.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="42.2" y="526.0"></text>
</g>
<g>
<title>__x64_sys_write (5 samples, 0.59%)</title><rect x="41.9" y="499.0" width="7.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="44.9" y="510.0"></text>
</g>
<g>
<title>ksys_write (5 samples, 0.59%)</title><rect x="41.9" y="483.0" width="7.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="44.9" y="494.0"></text>
</g>
<g>
<title>__fdget_pos (1 samples, 0.12%)</title><rect x="41.9" y="467.0" width="1.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="44.9" y="478.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.12%)</title><rect x="41.9" y="451.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="44.9" y="462.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.12%)</title><rect x="41.9" y="435.0" width="1.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="44.9" y="446.0"></text>
</g>
<g>
<title>vfs_write (4 samples, 0.47%)</title><rect x="43.3" y="467.0" width="5.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="46.3" y="478.0"></text>
</g>
<g>
<title>__vfs_write (4 samples, 0.47%)</title><rect x="43.3" y="451.0" width="5.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="46.3" y="462.0"></text>
</g>
<g>
<title>new_sync_write (4 samples, 0.47%)</title><rect x="43.3" y="435.0" width="5.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="46.3" y="446.0"></text>
</g>
<g>
<title>pipe_write (4 samples, 0.47%)</title><rect x="43.3" y="419.0" width="5.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="46.3" y="430.0"></text>
</g>
<g>
<title>__wake_up_sync_key (1 samples, 0.12%)</title><rect x="44.7" y="403.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="47.7" y="414.0"></text>
</g>
<g>
<title>__wake_up_common_lock (1 samples, 0.12%)</title><rect x="44.7" y="387.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="47.7" y="398.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.12%)</title><rect x="44.7" y="371.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="47.7" y="382.0"></text>
</g>
<g>
<title>mutex_lock (2 samples, 0.24%)</title><rect x="46.1" y="403.0" width="2.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="49.1" y="414.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (1 samples, 0.12%)</title><rect x="48.9" y="627.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (812 samples, 95.53%)</title><rect x="50.3" y="755.0" width="1127.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="53.3" y="766.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (1 samples, 0.12%)</title><rect x="50.3" y="739.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="53.3" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.12%)</title><rect x="50.3" y="723.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="53.3" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (1 samples, 0.12%)</title><rect x="50.3" y="707.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="53.3" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (1 samples, 0.12%)</title><rect x="50.3" y="691.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="53.3" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/bmendli/DAOImpl.iterator (811 samples, 95.41%)</title><rect x="51.6" y="739.0" width="1125.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="54.6" y="750.0">ru/mail/polis/dao/bmendli/DAOImpl.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/bmendli/DAOImpl.cellIterator (811 samples, 95.41%)</title><rect x="51.6" y="723.0" width="1125.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="54.6" y="734.0">ru/mail/polis/dao/bmendli/DAOImpl.cellIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (810 samples, 95.29%)</title><rect x="51.6" y="707.0" width="1124.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="54.6" y="718.0">com/google/common/collect/Iterators.mergeSorted</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (810 samples, 95.29%)</title><rect x="51.6" y="691.0" width="1124.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="54.6" y="702.0">com/google/common/collect/Iterators$MergingIterator.&lt;init&gt;</text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (810 samples, 95.29%)</title><rect x="51.6" y="675.0" width="1124.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="54.6" y="686.0">java/util/Spliterators$1Adapter.hasNext</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (810 samples, 95.29%)</title><rect x="51.6" y="659.0" width="1124.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="54.6" y="670.0">java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (810 samples, 95.29%)</title><rect x="51.6" y="643.0" width="1124.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="54.6" y="654.0">java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance</text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (462 samples, 54.35%)</title><rect x="51.6" y="627.0" width="641.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="54.6" y="638.0">java/util/Spliterator.getExactSizeIfKnown</text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (462 samples, 54.35%)</title><rect x="51.6" y="611.0" width="641.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="54.6" y="622.0">java/util/Spliterators$IteratorSpliterator.estimateSize</text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (39 samples, 4.59%)</title><rect x="168.3" y="595.0" width="54.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="171.3" y="606.0">java/..</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.&lt;init&gt; (36 samples, 4.24%)</title><rect x="168.3" y="579.0" width="49.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="171.3" y="590.0">java/..</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.&lt;init&gt; (27 samples, 3.18%)</title><rect x="180.8" y="563.0" width="37.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="183.8" y="574.0">jav..</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (3 samples, 0.35%)</title><rect x="218.2" y="579.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="221.2" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (3 samples, 0.35%)</title><rect x="218.2" y="563.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.2" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.12%)</title><rect x="218.2" y="547.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.2" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (2 samples, 0.24%)</title><rect x="219.6" y="547.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="222.6" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.24%)</title><rect x="219.6" y="531.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="222.6" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.12%)</title><rect x="221.0" y="515.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="224.0" y="526.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.12%)</title><rect x="221.0" y="499.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="224.0" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$EntrySetView.size (339 samples, 39.88%)</title><rect x="222.4" y="595.0" width="470.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="225.4" y="606.0">java/util/TreeMap$NavigableSubMap$EntrySetView.size</text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (2 samples, 0.24%)</title><rect x="669.4" y="579.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="672.4" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.&lt;init&gt; (1 samples, 0.12%)</title><rect x="669.4" y="563.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="672.4" y="574.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (1 samples, 0.12%)</title><rect x="670.8" y="563.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="673.8" y="574.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (1 samples, 0.12%)</title><rect x="670.8" y="547.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="673.8" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.12%)</title><rect x="670.8" y="531.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="673.8" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.12%)</title><rect x="670.8" y="515.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="673.8" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (15 samples, 1.76%)</title><rect x="672.2" y="579.0" width="20.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="675.2" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (15 samples, 1.76%)</title><rect x="672.2" y="563.0" width="20.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="675.2" y="574.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (15 samples, 1.76%)</title><rect x="672.2" y="547.0" width="20.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="675.2" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (9 samples, 1.06%)</title><rect x="680.5" y="531.0" width="12.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="683.5" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (105 samples, 12.35%)</title><rect x="693.0" y="627.0" width="145.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="696.0" y="638.0">java/util/stream/S..</text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.cancellationRequested (2 samples, 0.24%)</title><rect x="695.8" y="611.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="698.8" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$66/1791488763.getAsBoolean (101 samples, 11.88%)</title><rect x="698.6" y="611.0" width="140.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="701.6" y="622.0">java/util/stream/S..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (101 samples, 11.88%)</title><rect x="698.6" y="595.0" width="140.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="701.6" y="606.0">java/util/stream/S..</text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (101 samples, 11.88%)</title><rect x="698.6" y="579.0" width="140.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="701.6" y="590.0">java/util/Splitera..</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (79 samples, 9.29%)</title><rect x="698.6" y="563.0" width="109.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="701.6" y="574.0">java/util/Tre..</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (79 samples, 9.29%)</title><rect x="698.6" y="547.0" width="109.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="701.6" y="558.0">java/util/Tre..</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (79 samples, 9.29%)</title><rect x="698.6" y="531.0" width="109.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="701.6" y="542.0">java/util/Tre..</text>
</g>
<g>
<title>java/util/TreeMap.successor (27 samples, 3.18%)</title><rect x="770.8" y="515.0" width="37.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="773.8" y="526.0">jav..</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.hasNext (7 samples, 0.82%)</title><rect x="808.2" y="563.0" width="9.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="811.2" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (15 samples, 1.76%)</title><rect x="818.0" y="563.0" width="20.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="821.0" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/bmendli/MemTable$$Lambda$58/1867494348.apply (15 samples, 1.76%)</title><rect x="818.0" y="547.0" width="20.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="821.0" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/bmendli/MemTable.lambda$iterator$0 (15 samples, 1.76%)</title><rect x="818.0" y="531.0" width="20.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="821.0" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/bmendli/Cell.&lt;init&gt; (15 samples, 1.76%)</title><rect x="818.0" y="515.0" width="20.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="821.0" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (243 samples, 28.59%)</title><rect x="838.8" y="627.0" width="337.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="841.8" y="638.0">java/util/stream/StreamSpliterators$WrappingSp..</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (26 samples, 3.06%)</title><rect x="1119.2" y="611.0" width="36.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1122.2" y="622.0">jav..</text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (15 samples, 1.76%)</title><rect x="1155.3" y="611.0" width="20.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1158.3" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/bmendli/MemTable.iterator (1 samples, 0.12%)</title><rect x="1176.1" y="707.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1179.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (1 samples, 0.12%)</title><rect x="1176.1" y="691.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1179.1" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (1 samples, 0.12%)</title><rect x="1176.1" y="675.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1179.1" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.12%)</title><rect x="1176.1" y="659.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1179.1" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/bmendli/MyService.getBytesFromByteBuffer (1 samples, 0.12%)</title><rect x="1177.5" y="755.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1180.5" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.12%)</title><rect x="1177.5" y="739.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1180.5" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.12%)</title><rect x="1177.5" y="723.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1180.5" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.12%)</title><rect x="1177.5" y="707.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1180.5" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.12%)</title><rect x="1178.9" y="819.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1181.9" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (2 samples, 0.24%)</title><rect x="1180.3" y="835.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1183.3" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (2 samples, 0.24%)</title><rect x="1180.3" y="819.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1183.3" y="830.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (1 samples, 0.12%)</title><rect x="1180.3" y="803.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1183.3" y="814.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.12%)</title><rect x="1180.3" y="787.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1183.3" y="798.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.12%)</title><rect x="1180.3" y="771.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.3" y="782.0"></text>
</g>
<g>
<title>__GI___recv (1 samples, 0.12%)</title><rect x="1181.7" y="803.0" width="1.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1184.7" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.12%)</title><rect x="1181.7" y="787.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1184.7" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.12%)</title><rect x="1181.7" y="771.0" width="1.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1184.7" y="782.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (1 samples, 0.12%)</title><rect x="1181.7" y="755.0" width="1.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1184.7" y="766.0"></text>
</g>
<g>
<title>__sys_recvfrom (1 samples, 0.12%)</title><rect x="1181.7" y="739.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1184.7" y="750.0"></text>
</g>
<g>
<title>sock_recvmsg (1 samples, 0.12%)</title><rect x="1181.7" y="723.0" width="1.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1184.7" y="734.0"></text>
</g>
<g>
<title>inet6_recvmsg (1 samples, 0.12%)</title><rect x="1181.7" y="707.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1184.7" y="718.0"></text>
</g>
<g>
<title>tcp_recvmsg (1 samples, 0.12%)</title><rect x="1181.7" y="691.0" width="1.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1184.7" y="702.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.12%)</title><rect x="1181.7" y="675.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1184.7" y="686.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.12%)</title><rect x="1181.7" y="659.0" width="1.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1184.7" y="670.0"></text>
</g>
<g>
<title>start_thread (5 samples, 0.59%)</title><rect x="1183.1" y="883.0" width="6.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1186.1" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (5 samples, 0.59%)</title><rect x="1183.1" y="867.0" width="6.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1186.1" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (5 samples, 0.59%)</title><rect x="1183.1" y="851.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.1" y="862.0"></text>
</g>
<g>
<title>JavaThread::run() (5 samples, 0.59%)</title><rect x="1183.1" y="835.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.1" y="846.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (5 samples, 0.59%)</title><rect x="1183.1" y="819.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.1" y="830.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (5 samples, 0.59%)</title><rect x="1183.1" y="803.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.1" y="814.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (5 samples, 0.59%)</title><rect x="1183.1" y="787.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.1" y="798.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (5 samples, 0.59%)</title><rect x="1183.1" y="771.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.1" y="782.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (3 samples, 0.35%)</title><rect x="1183.1" y="755.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.1" y="766.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.12%)</title><rect x="1183.1" y="739.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.1" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (2 samples, 0.24%)</title><rect x="1184.4" y="739.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.4" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.12%)</title><rect x="1184.4" y="723.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.4" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.82] (1 samples, 0.12%)</title><rect x="1185.8" y="723.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.8" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.12%)</title><rect x="1187.2" y="755.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.2" y="766.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.12%)</title><rect x="1187.2" y="739.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.2" y="750.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseGVN*) const (1 samples, 0.12%)</title><rect x="1187.2" y="723.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.2" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.12%)</title><rect x="1187.2" y="707.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1190.2" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1188.6" y="755.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.6" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1188.6" y="739.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1188.6" y="723.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1188.6" y="707.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1188.6" y="691.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1188.6" y="675.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.6" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1188.6" y="659.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.6" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1188.6" y="643.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1188.6" y="627.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1188.6" y="611.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1188.6" y="595.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1188.6" y="579.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.6" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1188.6" y="563.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.6" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1188.6" y="547.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1188.6" y="531.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1188.6" y="515.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1188.6" y="499.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1188.6" y="483.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.6" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1188.6" y="467.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.6" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1188.6" y="451.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1188.6" y="435.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1188.6" y="419.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1188.6" y="403.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1188.6" y="387.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.6" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1188.6" y="371.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.6" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1188.6" y="355.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1188.6" y="339.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1188.6" y="323.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1188.6" y="307.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.12%)</title><rect x="1188.6" y="291.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.6" y="302.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.12%)</title><rect x="1188.6" y="275.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.6" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.12%)</title><rect x="1188.6" y="259.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.6" y="270.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.12%)</title><rect x="1188.6" y="243.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.6" y="254.0"></text>
</g>
</g>
</svg>
